{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoFooter.js","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","this","observable","lastID","todos","push","todosShow","showState","selectToRemove","filter","todo","showTodo","action","TodoEntry","state","value","handdleKeyDown","event","keyCode","preventDefault","todoStore","addTodo","setState","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","onToggle","props","toggle","delWork","removeTodo","checked","onClick","TodoFooter","activeTodo","allTodo","completedTodo","clearCompletedTodo","class","length","href","TodoItems","console","log","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.78cf9c49.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\n\r\nexport default class TodoModel {\r\n  store;\r\n  id;\r\n  @observable title;\r\n  @observable completed;\r\n\r\n  constructor(store, title, completed, id) {\r\n    this.title = title;\r\n    this.completed = completed;\r\n    this.id = id;\r\n    this.store = store;\r\n  }\r\n\r\n  toggle() {\r\n    this.completed = !this.completed;\r\n  }\r\n}\r\n","import { observable, action, computed, observe } from \"mobx\";\r\nimport TodoModel from \"./TodoModel\";\r\n\r\nclass TodoStore {\r\n  @observable todos = [];\r\n  @observable todosShow = [];\r\n  @observable showState =  \"all\"\r\n  \r\n  lastID = 0;\r\n \r\n  @action\r\n  addTodo(title) {\r\n    this.todos.push(new TodoModel(this, title, false, this.lastID++));\r\n    this.todosShow=this.todos\r\n    this.showState=\"all\"\r\n  }\r\n\r\n  @action\r\n  removeTodo(selectToRemove) {\r\n    this.todos =  this.todos.filter(function (todo) {\r\n      return todo != selectToRemove;\r\n    });\r\n    this.todosShow = this.todos\r\n  }\r\n\r\n  @action\r\n  activeTodo(){\r\n    this.showState = \"active\"\r\n    this.todosShow = this.todos.filter(function(todo){\r\n      return !todo.completed\r\n    })\r\n  }\r\n\r\n  @action\r\n  completedTodo(){\r\n    this.showState = \"completed\"\r\n    this.todosShow = this.todos.filter(function(todo){\r\n      return todo.completed\r\n    })\r\n  }\r\n\r\n  @action\r\n  allTodo(){\r\n    this.todosShow = this.todos.filter(function(todo){\r\n      return todo\r\n    })\r\n    this.showState = \"all\"\r\n    this.showTodo()\r\n  }\r\n\r\n  @action\r\n  clearCompletedTodo(){\r\n    this.showState = \"all\"\r\n    this.todos = this.todos.filter(function(todo){\r\n      return !todo.completed\r\n    })\r\n    this.todosShow = this.todos\r\n  }\r\n\r\n@action\r\n  showTodo(){\r\nreturn this.todos\r\n  }\r\n}\r\n\r\nconst store = new TodoStore();\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\nclass TodoEntry extends Component {\r\n    state={\r\n        value: \"\"\r\n    };\r\n\r\n    handdleKeyDown= event=>{\r\n        if(event.keyCode !== 13){\r\n            return\r\n        }\r\n        event.preventDefault()\r\n        todoStore.addTodo(this.state.value)\r\n        this.setState({\r\n            value: ''\r\n        })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todo</h1>\r\n        <input\r\n        value={this.state.value}\r\n        onChange={event=>this.setState({value: event.target.value})}\r\n        onKeyDown={event=>this.handdleKeyDown(event)}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n  onToggle = () => {\r\n      this.props.todo.toggle();\r\n  };\r\n\r\n  delWork = (todo) =>{\r\n    todoStore.removeTodo(todo)\r\n  };\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <li className={todo.completed ? \"completed\" : \"\"}>\r\n        <div className=\"view\">\r\n          <input\r\n            onChange={this.onToggle}\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            value=\"on\"\r\n            checked={todo.completed}\r\n          />\r\n          <label>{todo.title}</label>\r\n          <button className=\"destroy\" onClick={event=>this.delWork(todo)}/>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\nimport { observe, observable } from \"mobx\";\r\n\r\n@observer\r\nclass TodoFooter extends Component {\r\n    activeTodo = event=>{\r\n        todoStore.activeTodo();\r\n    }\r\n\r\n    allTodo= event=>{\r\n        todoStore.allTodo();\r\n    }\r\n\r\n    completedTodo= event=>{\r\n        todoStore.completedTodo();\r\n    }\r\n\r\n    clearCompletedTodo= event=>{\r\n        todoStore.clearCompletedTodo();\r\n    }\r\n  render() {\r\n    return (\r\n      <footer class=\"footer\">\r\n        <span class=\"todo-count\">\r\n    <strong>{todoStore.todosShow.length}</strong> item\r\n        </span>\r\n        <ul class=\"filters\">\r\n          <li>\r\n            <a onClick={event=>this.allTodo(event)} className={(todoStore.showState == \"all\")? \"selected\":\"\"} href=\"#/\">\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a onClick={event=>this.activeTodo(event)} className={(todoStore.showState == \"active\")? \"selected\":\"\"} href=\"#\">Active</a>\r\n          </li>\r\n          <li>\r\n            <a onClick={event=>this.completedTodo(event)} className={(todoStore.showState == \"completed\")? \"selected\":\"\"} href=\"#/completed\">Completed</a>\r\n          </li>\r\n        </ul>\r\n        <button onClick={event=>this.clearCompletedTodo(event)} class=\"clear-completed\">Clear completed</button>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\nexport default TodoFooter;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\nimport { observe, observable } from \"mobx\";\r\nimport TodoFooter from \"./TodoFooter\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n  render() {\r\n    //const todo =  todoStore.todos;\r\n    const todo =  todoStore.todosShow\r\n    console.log(\"show: \"+todo)\r\n\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {\r\n          todo.map(todo=>{\r\n            return <TodoItem todo={todo} />;\r\n          })}\r\n        </ul>\r\n        <TodoFooter />\r\n      </section>\r\n      \r\n    );\r\n  }\r\n}\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport TodoFooter from \"./components/TodoFooter\";\nimport { observer } from \"mobx-react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n        <TodoItems />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}